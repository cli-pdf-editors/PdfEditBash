#!/bin/bash
#
# pe_calcPageScaling.sh - script to calculate the scaling parameters
#                         to convert X & Y distances in centimeters
#                         to points.
#
# Copyright 2019 Robert L (Bob) Parker rlp1938@gmail.com
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.# See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.
#
usage()
{
  echo Options
  echo -h, --help causes this help text to be printed.
  echo
  cat << END
    You need to have a PDF printed that was generated by pe_rulebox.sh,
    and the data MUST have been registered in config.lst
    (pe_rulebox.sh -r).
    
    There are 2 parameters required.
    \$1 must be X|Y, it is used orientate the direction of your
    measurement.
    \$2 is measured distance in centimeters from the bottom ruled line
    to the top, Y direction, or from the left line to the right, X
    measurement. Measure from the outside of the beginning line to the
    inside of the opposite line because the ruled lines have thickness.

    Example
    ./pe_calcPageScaling.sh X 18.52

    Take care to make measurements on the printed form to the nearest
    0.5 mm. There are almost 3 points per mm distance on the form.
END
exit $1
}

if [[ "$1" == --help ]] || [[ "$1" == -h ]]; then usage 0; fi
xy=$(echo "$1" | tr [:lower:] [:upper:])

# Test $1 is valid.
if [[ "$xy" != "X" ]] && [[ "$xy" != "Y" ]];then
  echo \$1 must be \'X\' or \'Y\', not "$xy"; usage 1
fi

# Must have right number of arguments
if [[ $# -ne 2 ]];then
  echo Must have 2 arguments in all, not $#; usage 1
fi

# make sure the config file is sane
datalines=$(grep '^datum' config.lst |wc -l)
if [[ "$datalines" -ne 4 ]];then
  echo config.lst configuration not completed, quitting.
  exit 1
fi

if [[ "$xy" = "X" ]];then # left to right
  left=$(grep '^datumL' config.lst |cut -d: -f2)
  echo "$left"
  right=$(grep '^datumR' config.lst |cut -d: -f2)
  echo "$right"
  distp=$(echo "$right - $left" | bc -l)  # points distance
  distc="$2"  # centimeters distance
  echo "$distp"
  scaleX=$(echo "$distp / $distc" |bc -l)
  scaleX=$(echo "$scaleX + .0005" |bc -l)
  w=$(echo "$scaleX" |cut -d. -f1)
  f=$(echo "$scaleX" |cut -d. -f2)
  f=$(echo "$f" |cut -c -3)
  scaleX="$w"."$f"
  echo "$scaleX"
  # register this parameter in config.lst
  grep 'scaleX' config.lst > /dev/null
  if [[ $? -eq 0 ]];then
    sed -i '/scaleX/d' config.lst
  fi
  echo scaleX:"$scaleX" >> config.lst
else # bottom to top

  btm=$(grep '^datumB' config.lst |cut -d: -f2)
  echo "$btm"
  top=$(grep '^datumT' config.lst |cut -d: -f2)
  echo "$top"
  distp=$(echo "$top - $btm" | bc -l)  # points distance
  distc="$2"  # centimeters distance
  echo "$distp"
  scaleY=$(echo "$distp / $distc" |bc -l)
  scaleY=$(echo "$scaleY + .0005" |bc -l)
  w=$(echo "$scaleY" |cut -d. -f1)
  f=$(echo "$scaleY" |cut -d. -f2)
  f=$(echo "$f" |cut -c -3)
  scaleY="$w"."$f"
  echo "$scaleY"
  # register this parameter in config.lst
  grep 'scaleY' config.lst > /dev/null
  if [[ $? -eq 0 ]];then
    sed -i '/scaleY/d' config.lst
  fi
  echo scaleY:"$scaleY" >> config.lst
fi

